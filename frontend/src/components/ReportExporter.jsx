import React, { useState } from 'react';
import { Download, FileText, Mail, Printer } from 'lucide-react';

const ReportExporter = ({ report, assignment }) => {
  const [exporting, setExporting] = useState(false);

  const exportToPDF = async () => {
    setExporting(true);
    try {
      // Create a comprehensive report content
      const reportContent = generateReportContent();
      
      // For now, we'll create a simple text download
      // In a real implementation, you'd use jsPDF or similar
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `plagiarism-report-${assignment?.student_name || 'student'}-${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setExporting(false);
    }
  };

  const generateReportContent = () => {
    const aiScore = ((report.ai_probability || 0) * 100).toFixed(1);
    const plagiarismScore = ((report.plagiarism_score || 0) * 100).toFixed(1);
    const overallRisk = Math.max(report.ai_probability || 0, report.plagiarism_score || 0) > 0.7 ? 'HIGH' : 
                       Math.max(report.ai_probability || 0, report.plagiarism_score || 0) > 0.4 ? 'MEDIUM' : 'LOW';

    let content = `
PLAGIARISM & AI DETECTION REPORT
================================

Student Information:
- Name: ${assignment?.student_name || 'N/A'}
- Course: ${assignment?.course_name || 'N/A'}
- Assignment: ${assignment?.assignment_title || 'N/A'}
- File: ${assignment?.file_name || 'N/A'}
- Analysis Date: ${new Date(report.completed_at || report.created_at).toLocaleDateString()}

ANALYSIS SUMMARY
================
Overall Risk Level: ${overallRisk}
AI Detection Score: ${aiScore}%
Plagiarism Score: ${plagiarismScore}%

VERDICT
=======
${report.verdict || 'Analysis completed successfully.'}

`;

    // Add AI-flagged content
    if (report.ai_highlight && report.ai_highlight.filter(h => h.ai).length > 0) {
      content += `
AI-GENERATED CONTENT DETECTED
=============================
${report.ai_highlight.filter(h => h.ai).length} sentences flagged as potentially AI-generated:

`;
      report.ai_highlight.filter(h => h.ai).slice(0, 10).forEach((highlight, index) => {
        content += `${index + 1}. "${highlight.text}"\n\n`;
      });
    }

    // Add plagiarism matches
    if (report.plagiarism_highlight && report.plagiarism_highlight.length > 0) {
      content += `
PLAGIARISM MATCHES DETECTED
===========================
${report.plagiarism_highlight.length} potential matches found:

`;
      report.plagiarism_highlight
        .sort((a, b) => (b.score || 0) - (a.score || 0))
        .slice(0, 10)
        .forEach((highlight, index) => {
          content += `${index + 1}. Similarity: ${((highlight.score || 0) * 100).toFixed(1)}%
   Text: "${highlight.text}"
   Source: ${highlight.source}
   ${highlight.title ? `Title: ${highlight.title}` : ''}
   
`;
        });
    }

    // Add recommendations
    content += `
RECOMMENDATIONS
===============
`;

    if (report.ai_probability > 0.7 || report.plagiarism_score > 0.5) {
      content += `- IMMEDIATE ACTION REQUIRED: Manual review and discussion with student\n`;
    }
    if (report.ai_probability > 0.7) {
      content += `- Discuss AI usage policies with student\n`;
    }
    if (report.plagiarism_score > 0.5) {
      content += `- Review flagged passages with student for proper attribution\n`;
    }
    if (report.ai_probability <= 0.4 && report.plagiarism_score <= 0.3) {
      content += `- No immediate concerns - proceed with standard grading\n`;
    }

    content += `
ANALYSIS STATISTICS
==================
- Total sentences analyzed: ${report.ai_highlight?.length || 0}
- AI-flagged sentences: ${report.ai_highlight?.filter(h => h.ai).length || 0}
- Plagiarism matches: ${report.plagiarism_highlight?.length || 0}
- Unique sources: ${Array.from(new Set(report.plagiarism_highlight?.map(h => h.source) || [])).length}

---
Report generated by PlagiaSure Academic Integrity System
${new Date().toLocaleString()}
`;

    return content;
  };

  const copyReportSummary = async () => {
    const summary = `
📊 PLAGIARISM REPORT SUMMARY

Student: ${assignment?.student_name || 'N/A'}
Assignment: ${assignment?.assignment_title || 'N/A'}

🤖 AI Detection: ${((report.ai_probability || 0) * 100).toFixed(1)}%
📄 Plagiarism: ${((report.plagiarism_score || 0) * 100).toFixed(1)}%
⚠️ Risk Level: ${Math.max(report.ai_probability || 0, report.plagiarism_score || 0) > 0.7 ? 'HIGH' : 
                Math.max(report.ai_probability || 0, report.plagiarism_score || 0) > 0.4 ? 'MEDIUM' : 'LOW'}

${report.verdict || 'Analysis completed.'}
`;

    try {
      await navigator.clipboard.writeText(summary);
      // You could add a toast notification here
    } catch (err) {
      console.error('Failed to copy summary:', err);
    }
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4">
      <h4 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
        <Download className="h-4 w-4 mr-2" />
        Export Report
      </h4>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
        <button
          onClick={exportToPDF}
          disabled={exporting}
          className="flex items-center justify-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <FileText className="h-4 w-4 mr-2" />
          {exporting ? 'Exporting...' : 'Download Report'}
        </button>
        
        <button
          onClick={copyReportSummary}
          className="flex items-center justify-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Mail className="h-4 w-4 mr-2" />
          Copy Summary
        </button>
      </div>
      
      <div className="mt-3 text-xs text-gray-500">
        <p>• Download includes full analysis details and recommendations</p>
        <p>• Summary format is optimized for email sharing</p>
      </div>
    </div>
  );
};

export default ReportExporter;